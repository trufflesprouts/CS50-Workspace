

0.  What is pneumonoultramicroscopicsilicovolcanoconiosis?
        The logest word in the english language published in a dictionary, it refers to a lung disease that is otherwise known as silicosis.


1.  According to its man page, what does getrusage do?
        Getrusage() returns the pointer to a struct containing the usage statistics of the program. Information like CPU time, memory usage,
        blocks in/out and more can be found here.


2.  Per that same man page, how many members are in a variable of type struct rusage?
        sixteen.


3.  Why do you think we pass before and after by reference (instead of by value) to calculate, even though we’re not changing their contents?
        The getrusage function prototype expects a pointer. Using pointers, rather than passing by value, is also quicker and more efficient.


4.  Explain as precisely as possible, in a paragraph or more, how main goes about reading words from a file. In other words, convince us that you indeed understand how that function’s for loop works.
        After opening and checking that the file has opened, the for loop iterates until the EOF, or end or file, marker is reached. C is init
        -ialized with the first character from the file, pointed to by fp. Each iteration of the for loop causes C to be assigned the value of
        the next character in the file. 
        Each character, contained in variable C, is checked to ensure it is a letter or an apostrophe, as long  as  the  apostrophe  does  not
        appear at the beginning of the word. If it is a letter, the character will be inserted  into the WORD array  at  the  INDEX  position.
        After this happens INDEX is incremented to go to the next position in the array. 
        If the size of INDEX exceeds the maximum permitted size of a word, as defined by LENGTH, the program will cycle to the end of the word
        and start looking for the next word, by resetting index to 0. The same thing is done if a number is found, within a word or on its own. 
        If the array contains no numbers, starting apostrophes, and is below the maximum length of a word, it must be a word so it is given  a
        null terminator. While being timed, the word is checked for misspellings. If it is not found in the dictionary, the word is printed out
        and the total number of misspellings caught is increased by 1.    




5.  Why do you think we used fgetc to read each word’s characters one at a time rather than use fscanf with a format string like "%s" to read whole words at a time? Put another way, what problems might arise by relying on fscanf alone?
        fgetc() reads character-by-character from a stream. This will enable us to keep track of the number of chars we read, while using fscanf(),
        on the other hand, might get us into trouble if a longer string than we expect was read.This might overwrite other important data in memory
        or probably makes our program exist with a segmentation fault.
        


6.  Why do you think we declared the parameters for check and load as const?
        These are pointers to a constant character. These pointers cannot change the values that they are pointing to. This is useful for functions
        like load and check whose job is not to change the elements in the WORD array, but only to read them. Other pointers, however,  can  change
        the value of the chars stored in the WORD array, allowing MAIN to pass a new string to the CHECK function, while taking extra steps to ensu
        -re that CHECK does not modify it.


7.  What data structure(s) did you use to implement your spell-checker? Be sure not to leave your answer at just "hash table," "trie," or the like. Expound on what’s inside each of your "nodes."
        The data structure contains a Hash Table array of TABLESIZE, each hash bucket contains a linked list of all the words that share the same 
        hash. Each node in the linked list contains a Word string and a pointer to the next node.


8.  How slow was your code the first time you got it working correctly?
        I DON'T KNOW


9.  What kinds of changes, if any, did you make to your code in order to improve its performance?
        Changing the hash function made the biggest improvment, also the hash table size played a big role.


10. Do you feel that your code has any bottlenecks that you were not able to chip away at?
        Time to unload is a pain in the ass.

