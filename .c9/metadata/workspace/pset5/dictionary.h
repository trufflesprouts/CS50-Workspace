{"filter":false,"title":"dictionary.h","tooltip":"/pset5/dictionary.h","undoManager":{"mark":88,"position":88,"stack":[[{"start":{"row":0,"column":0},"end":{"row":39,"column":0},"action":"remove","lines":["/**"," * dictionary.h"," *"," * Computer Science 50"," * Problem Set 5"," *"," * Declares a dictionary's functionality."," */","","#ifndef DICTIONARY_H","#define DICTIONARY_H","","#include <stdbool.h>","","// maximum length for a word","// (e.g., pneumonoultramicroscopicsilicovolcanoconiosis)","#define LENGTH 45","","/**"," * Returns true if word is in dictionary else false."," */","bool check(const char* word);","","/**"," * Loads dictionary into memory.  Returns true if successful else false."," */","bool load(const char* dictionary);","","/**"," * Returns number of words in dictionary if loaded else 0 if not yet loaded."," */","unsigned int size(void);","","/**"," * Unloads dictionary from memory.  Returns true if successful else false."," */","bool unload(void);","","#endif // DICTIONARY_H",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":83,"column":22},"action":"insert","lines":["/****************************************************************************"," * dictionary.h"," *"," * Computer Science 50"," * Problem Set 5"," *"," * Declares a dictionary's functionality."," ***************************************************************************/","","#ifndef DICTIONARY_H","#define DICTIONARY_H","","#include <stdbool.h>","#include <stdio.h>","#include <malloc.h>","#include <string.h>","#include <ctype.h>","","// maximum length for a word","// (e.g., pneumonoultramicroscopicsilicovolcanoconiosis)","#define LENGTH 45","","// define structure for each node in the list","typedef struct node","{","    // the word we store in this node","    char* word;","    ","    // the link to the next node in the list","    struct node* next;","}","node;","","// define structure for each misspelled node in the list","typedef struct misspelledNode","{","    // the misspelled word we store in this node","    char* word;","    ","    // the link to the next mispellde node in the list","    struct misspelledNode* next;","}","misspelledNode;","","// ideally SIZE needs to be approximately amount of words in the dict since then every word has it's own hash","#define SIZE 160000","","/**"," * Hashes a word. Returns hashed word."," * Source of hash function: stackoverflow.com/questions/14409466/simple-hash-functions"," * @param const char* word - The word we want return a hash value for."," * @return unsigned int - Returns the hashed value."," */","unsigned int hashWord(const char* word);","","/**"," * Returns true if word is in dictionary else false."," */","bool check(const char* word);","","/**"," * Loads dictionary into memory.  Returns true if successful else false."," */","bool load(const char* dictionary);","","/**"," * Returns number of words in dictionary if loaded else 0 if not yet loaded."," */","unsigned int size(void);","","/**"," * Unloads dictionary from memory.  Returns true if successful else false."," */","bool unload(void);","","/**"," * Creates hashtable for words misspelled."," * This way we can count the number of unique words misspelled."," * @param const char* word - The misspelled word we want to register."," * @return int - The return value is equal to 0 if no errors ocurred, else 1."," */","int misspelledWordRegister(const char* word);","","#endif // DICTIONARY_H"]}],[{"start":{"row":25,"column":0},"end":{"row":26,"column":0},"action":"remove","lines":["    // the word we store in this node",""],"id":3}],[{"start":{"row":26,"column":0},"end":{"row":26,"column":4},"action":"remove","lines":["    "],"id":4}],[{"start":{"row":25,"column":15},"end":{"row":26,"column":0},"action":"remove","lines":["",""],"id":5}],[{"start":{"row":26,"column":0},"end":{"row":27,"column":0},"action":"remove","lines":["    // the link to the next node in the list",""],"id":6}],[{"start":{"row":0,"column":0},"end":{"row":80,"column":22},"action":"remove","lines":["/****************************************************************************"," * dictionary.h"," *"," * Computer Science 50"," * Problem Set 5"," *"," * Declares a dictionary's functionality."," ***************************************************************************/","","#ifndef DICTIONARY_H","#define DICTIONARY_H","","#include <stdbool.h>","#include <stdio.h>","#include <malloc.h>","#include <string.h>","#include <ctype.h>","","// maximum length for a word","// (e.g., pneumonoultramicroscopicsilicovolcanoconiosis)","#define LENGTH 45","","// define structure for each node in the list","typedef struct node","{","    char* word;","    struct node* next;","}","node;","","// define structure for each misspelled node in the list","typedef struct misspelledNode","{","    // the misspelled word we store in this node","    char* word;","    ","    // the link to the next mispellde node in the list","    struct misspelledNode* next;","}","misspelledNode;","","// ideally SIZE needs to be approximately amount of words in the dict since then every word has it's own hash","#define SIZE 160000","","/**"," * Hashes a word. Returns hashed word."," * Source of hash function: stackoverflow.com/questions/14409466/simple-hash-functions"," * @param const char* word - The word we want return a hash value for."," * @return unsigned int - Returns the hashed value."," */","unsigned int hashWord(const char* word);","","/**"," * Returns true if word is in dictionary else false."," */","bool check(const char* word);","","/**"," * Loads dictionary into memory.  Returns true if successful else false."," */","bool load(const char* dictionary);","","/**"," * Returns number of words in dictionary if loaded else 0 if not yet loaded."," */","unsigned int size(void);","","/**"," * Unloads dictionary from memory.  Returns true if successful else false."," */","bool unload(void);","","/**"," * Creates hashtable for words misspelled."," * This way we can count the number of unique words misspelled."," * @param const char* word - The misspelled word we want to register."," * @return int - The return value is equal to 0 if no errors ocurred, else 1."," */","int misspelledWordRegister(const char* word);","","#endif // DICTIONARY_H"],"id":7},{"start":{"row":0,"column":0},"end":{"row":58,"column":0},"action":"insert","lines":["/**"," * dictionary.h"," *"," * Computer Science 50"," * Problem Set 5"," *"," * Declares a dictionary's functionality."," */","","#ifndef DICTIONARY_H","#define DICTIONARY_H","","#include <stdbool.h>","#include <stdio.h>","#include <malloc.h>","#include <string.h>","#include <ctype.h>","","#define LENGTH 45","","#define TABLESIZE 10000","","unsigned int hash(const char* word);","","","","// Linked List Building Block","typedef struct sllist","{","    char* word;","    struct sllist* next;","}","sllnode;","","","","","/**"," * Returns true if word is in dictionary else false."," */","bool check(const char* word);","","/**"," * Loads dictionary into memory.  Returns true if successful else false."," */","bool load(const char* dictionary);","","/**"," * Returns number of words in dictionary if loaded else 0 if not yet loaded."," */","unsigned int size(void);","","/**"," * Unloads dictionary from memory.  Returns true if successful else false."," */","bool unload(void);","","#endif // DICTIONARY_H",""]}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"insert","lines":["6"],"id":8}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"remove","lines":["6"],"id":9}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"remove","lines":["0"],"id":10}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"remove","lines":["0"],"id":11}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":21},"action":"remove","lines":["100"],"id":12},{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["1"]}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"insert","lines":["6"],"id":13}],[{"start":{"row":20,"column":20},"end":{"row":20,"column":21},"action":"insert","lines":["0"],"id":14}],[{"start":{"row":20,"column":21},"end":{"row":20,"column":22},"action":"insert","lines":["0"],"id":15}],[{"start":{"row":20,"column":22},"end":{"row":20,"column":23},"action":"insert","lines":["0"],"id":16}],[{"start":{"row":20,"column":23},"end":{"row":20,"column":24},"action":"insert","lines":["0"],"id":17}],[{"start":{"row":25,"column":0},"end":{"row":34,"column":0},"action":"remove","lines":["","// Linked List Building Block","typedef struct sllist","{","    char* word;","    struct sllist* next;","}","sllnode;","",""],"id":20}],[{"start":{"row":24,"column":0},"end":{"row":25,"column":0},"action":"remove","lines":["",""],"id":21}],[{"start":{"row":23,"column":0},"end":{"row":24,"column":0},"action":"remove","lines":["",""],"id":22}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"remove","lines":["6"],"id":23}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"remove","lines":["1"],"id":24}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["2"],"id":25}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"insert","lines":["0"],"id":26}],[{"start":{"row":20,"column":20},"end":{"row":20,"column":21},"action":"insert","lines":["0"],"id":27}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":25},"action":"remove","lines":["2000000"],"id":28},{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["1"]}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"insert","lines":["0"],"id":29}],[{"start":{"row":20,"column":20},"end":{"row":20,"column":21},"action":"insert","lines":["0"],"id":30}],[{"start":{"row":20,"column":21},"end":{"row":20,"column":22},"action":"insert","lines":["0"],"id":31}],[{"start":{"row":20,"column":21},"end":{"row":20,"column":22},"action":"remove","lines":["0"],"id":32}],[{"start":{"row":20,"column":20},"end":{"row":20,"column":21},"action":"remove","lines":["0"],"id":33}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"remove","lines":["0"],"id":34}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"remove","lines":["1"],"id":35}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["6"],"id":36}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"insert","lines":["0"],"id":37}],[{"start":{"row":20,"column":20},"end":{"row":20,"column":21},"action":"insert","lines":["0"],"id":38}],[{"start":{"row":20,"column":21},"end":{"row":20,"column":22},"action":"insert","lines":["0"],"id":39}],[{"start":{"row":20,"column":22},"end":{"row":20,"column":23},"action":"insert","lines":["0"],"id":40}],[{"start":{"row":20,"column":22},"end":{"row":20,"column":23},"action":"remove","lines":["0"],"id":41}],[{"start":{"row":20,"column":21},"end":{"row":20,"column":22},"action":"remove","lines":["0"],"id":42}],[{"start":{"row":20,"column":21},"end":{"row":20,"column":22},"action":"insert","lines":["0"],"id":43}],[{"start":{"row":20,"column":22},"end":{"row":20,"column":23},"action":"insert","lines":["0"],"id":44}],[{"start":{"row":20,"column":22},"end":{"row":20,"column":23},"action":"remove","lines":["0"],"id":45}],[{"start":{"row":20,"column":22},"end":{"row":20,"column":23},"action":"insert","lines":["0"],"id":46}],[{"start":{"row":20,"column":23},"end":{"row":20,"column":24},"action":"insert","lines":["0"],"id":47}],[{"start":{"row":0,"column":0},"end":{"row":47,"column":0},"action":"remove","lines":["/**"," * dictionary.h"," *"," * Computer Science 50"," * Problem Set 5"," *"," * Declares a dictionary's functionality."," */","","#ifndef DICTIONARY_H","#define DICTIONARY_H","","#include <stdbool.h>","#include <stdio.h>","#include <malloc.h>","#include <string.h>","#include <ctype.h>","","#define LENGTH 45","","#define TABLESIZE 600000","","unsigned int hash(const char* word);","","","","/**"," * Returns true if word is in dictionary else false."," */","bool check(const char* word);","","/**"," * Loads dictionary into memory.  Returns true if successful else false."," */","bool load(const char* dictionary);","","/**"," * Returns number of words in dictionary if loaded else 0 if not yet loaded."," */","unsigned int size(void);","","/**"," * Unloads dictionary from memory.  Returns true if successful else false."," */","bool unload(void);","","#endif // DICTIONARY_H",""],"id":48},{"start":{"row":0,"column":0},"end":{"row":58,"column":0},"action":"insert","lines":["/**"," * dictionary.h"," *"," * Computer Science 50"," * Problem Set 5"," *"," * Declares a dictionary's functionality."," */","","#ifndef DICTIONARY_H","#define DICTIONARY_H","","#include <stdbool.h>","#include <stdio.h>","#include <malloc.h>","#include <string.h>","#include <ctype.h>","","#define LENGTH 45","","#define TABLESIZE 160000","","unsigned int hash(const char* word);","","","","// Linked List Building Block","typedef struct sllist","{","    char* word;","    struct sllist* next;","}","sllnode;","","","","","/**"," * Returns true if word is in dictionary else false."," */","bool check(const char* word);","","/**"," * Loads dictionary into memory.  Returns true if successful else false."," */","bool load(const char* dictionary);","","/**"," * Returns number of words in dictionary if loaded else 0 if not yet loaded."," */","unsigned int size(void);","","/**"," * Unloads dictionary from memory.  Returns true if successful else false."," */","bool unload(void);","","#endif // DICTIONARY_H",""]}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"remove","lines":["1"],"id":49}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["1"],"id":50}],[{"start":{"row":22,"column":36},"end":{"row":23,"column":0},"action":"remove","lines":["",""],"id":51}],[{"start":{"row":22,"column":36},"end":{"row":23,"column":0},"action":"remove","lines":["",""],"id":52}],[{"start":{"row":32,"column":0},"end":{"row":33,"column":0},"action":"remove","lines":["",""],"id":53}],[{"start":{"row":31,"column":0},"end":{"row":32,"column":0},"action":"remove","lines":["",""],"id":54}],[{"start":{"row":30,"column":8},"end":{"row":31,"column":0},"action":"remove","lines":["",""],"id":55}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"remove","lines":["6"],"id":93}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"remove","lines":["0"],"id":94}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"insert","lines":["0"],"id":95}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"remove","lines":["1"],"id":96}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["2"],"id":97}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"remove","lines":["0"],"id":98}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"remove","lines":["2"],"id":99}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["1"],"id":100}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"remove","lines":["1"],"id":101}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["2"],"id":102}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"insert","lines":["0"],"id":103}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"remove","lines":["2"],"id":104}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["6"],"id":105}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"remove","lines":["6"],"id":106}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["2"],"id":107}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":23},"action":"remove","lines":["20000"],"id":109},{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["1"]}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"insert","lines":["0"],"id":110}],[{"start":{"row":20,"column":20},"end":{"row":20,"column":21},"action":"insert","lines":["0"],"id":111}],[{"start":{"row":20,"column":21},"end":{"row":20,"column":22},"action":"insert","lines":["0"],"id":112}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":22},"action":"remove","lines":["1000"],"id":113},{"start":{"row":20,"column":18},"end":{"row":20,"column":23},"action":"insert","lines":["10000"]}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"remove","lines":["1"],"id":114}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["6"],"id":115}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["1"],"id":116}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"remove","lines":["1"],"id":117}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"remove","lines":["6"],"id":118}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["2"],"id":122}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"remove","lines":["2"],"id":123}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["1"],"id":124}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"insert","lines":["6"],"id":125}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"remove","lines":["1"],"id":126}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"insert","lines":["1"],"id":127}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"remove","lines":["1"],"id":128}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":20},"action":"insert","lines":["  "],"id":129}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"remove","lines":[" "],"id":130}],[{"start":{"row":20,"column":18},"end":{"row":20,"column":19},"action":"remove","lines":[" "],"id":131}],[{"start":{"row":20,"column":17},"end":{"row":20,"column":18},"action":"remove","lines":[" "],"id":132}],[{"start":{"row":20,"column":17},"end":{"row":20,"column":18},"action":"insert","lines":[" "],"id":133}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":20,"column":18},"end":{"row":20,"column":18},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1454421354950,"hash":"375c919e8463a5724e3fe996880a01fb8861da4f"}